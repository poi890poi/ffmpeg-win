Write Python codes with 3 files:
- layout.py to define layout with Pydantic.
- main.py to import layout.py and create a window using tkinter.
- impl.py to have callback functions that receive parameters from main window and run external program with subprocess.

The main window contains two panels:
- Left panel has multiple buttons to switch content of the right panel.
- Right panel has a table with multiple rows.
(Like a tab control or pages)

Each row in the table of right panel could have either:
- File Selection: A button to browse for file and a label to show path of the selected file.
- Property Viewer: A vertically scrollable table to display properties of a file in the format of key/value pairs.
- Time Input: A label and a input filed to designate time. Could be a free text input field or a time control in the format of HH:MM:SS.
- Parameter Input: A label and a text input.
- Progress Bar: A button to act and a progress bar with graphics and text over the bar.
- Options: A label and a dropdown list to choose among pre-defined options.

The application have 3 tabs:
- File Inspection:
  Row 1: File Selection
  Row 2: Property Viewer
  Callback function: refresh_file_meta() - Update or add file properties to Property Viewer on file selection.
- Trim Audio:
  Row 1: File Selection
  Row 2: Time Input for start time
  Row 3: Time Input for duration
  Row 4: Progress Bar for trimming
  Callback function: trim_audio() - Open subprocess to run external program to trim audio with input from Row 2 and Row 3. Parse subprocess console output and update Progress Bar.
- Loop Video:
  Row 1: File Selection
  Row 2: Time Input for duration
  Row 3: Progress Bar
  Callback function: loop_video() - Open subprocess to run external program to loop video with input from Row 2. Parse subprocess console output and update Progress Bar.
- Combine A&V:
  Row 1: File Selection for video
  Row 2: File Selection for audio
  Row 3: Options for audio codec: AAC, FLAC.
  Row 4: Options for sampling rate: 48 kHz, 96 kHz, 128 kHz.
  Row 5: Options for bit rate: 128k, 256k, 384k.
  Row 6: Progress Bar
  Callback function: combine_audio_video() - Open subprocess to run external program to combine audio and video with input from Row 2 to Row 5. Parse subprocess console output and update Progress Bar.

1. To access components of the active page, use a variable active_page to keep track of the active page (tab). And find the component recursively in al child elements of the active page.
2. Add a custom function "start" to be called on clicking start button of Progress Bar. Inside the start function, read all input fields of the active page.
3. On every "if something is not None" check, add exception handling to print in console so it doesn't fail silently.

refresh_file_meta(), as a function to interact with UI elements instead of perform processing tasks, should be in main.py instead of impl.py.
Same for browse_file(), should be in main.py. The bottom line is that impl.py should not import anything from tk. And there should be a function in impl.py to open file and read file properties than pass to refresh_file_meta().